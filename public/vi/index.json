[
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/",
	"title": "API Rate Limit và Throttling với Lambda Authorizer",
	"tags": [],
	"description": "",
	"content": "Tổng quan Đây là workshop về API Rate Limiting và Throttling trên AWS sử dụng Lambda Authorizers để kiểm soát truy cập và bảo vệ hệ thống API. Trong đó, Lambda Authorizers được xây dựng nhằm thực thi custom rate limiting logic, cho phép áp dụng giới hạn động (dynamic limits) dựa trên loại người dùng. Tiếp theo, Xây dựng API dựa vào AWS API Gateway, thiết lập Resource, Method, Usage Plan và API Key. Tích hợp với CloudWatch, EventBridge để thiết lập monitoring và alerting, giúp phát hiện sớm các bất thường và đưa ra cảnh báo kịp thời.\nProject Test Link\nNội dung:\nGiới thiệu Các bước chuẩn bị Tạo API, Usage Plan, API Key Tạo Authorizer Tạo EventBridge Schedule Tạo CloudWatch Alarm Host Static Web bằng S3 Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Đây là workshop về API Rate Limiting và Throttling trên AWS sử dụng Lambda Authorizers để kiểm soát truy cập và bảo vệ hệ thống API. Trong đó, Lambda Authorizers được xây dựng nhằm thực thi custom rate limiting logic, cho phép áp dụng giới hạn động (dynamic limits) dựa trên loại người dùng. Tiếp theo, Xây dựng API dựa vào AWS API Gateway, thiết lập Resource, Method, Usage Plan và API Key. Tích hợp với CloudWatch, EventBridge để thiết lập monitoring và alerting, giúp phát hiện sớm các bất thường và đưa ra cảnh báo kịp thời.\nProject Test Link\nNội dung:\nGiới thiệu Các bước chuẩn bị Tạo API, Usage Plan, API Key Tạo Authorizer Tạo EventBridge Schedule Tạo CloudWatch Alarm Host Static Web bằng S3 Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/3-create-api-usage-plan-api-key/3.1-create-api/",
	"title": "Tạo API",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo API Tạo Resource cho API Tạo Method cho Resource Tạo Stage cho API Kích hoạt Canary cho Stage Tạo API Truy cập vào API Gateway\nẤn vào Create API Chọn Build ở mục REST API Chọn New API Đặt tên cho API ở mục API name Chọn API endpoint type là Regional Chọn IP address type là IPv4 Ấn Create API Tạo Resource cho API Resource trong API Gateway chính là “đường dẫn” (path segment) trong REST API. Nó được kết hợp với HTTP method để tạo thành một endpoint đầy đủ mà client có thể gọi\nỞ giao diện của API vừa tạo, ấn vào Create resource Đặt tên cho Resource ở mục Resource name Bật CORS Ấn Create resource Khi bật CORS thì Method OPTIONS sẽ được khởi tạo cho Resource\nTạo các Resource: Devs, PremiumUsers, Users (Bật CORS cho các resource đó) Tạo Method cho Resource Ấn vào tên Resource (Ví dụ: /Devs) và ấn vào Create method Ở giao diện Create method, chọn Method type là GET Integration type là Lambda function Chọn các Lambda Funtion tương ứng với các Resource (Ví dụ: chọn Lambda devFuntion cho Resource /Devs ) Ấn vào Create method Tạo tiếp các Method tương tự cho các Resource còn lại Tạo Stage cho API Stage trong API Gateway là môi trường triển khai (deployment environment) của một API, có cấu hình, URL endpoint và stage variables riêng, thường được dùng để phân biệt dev/test/prod (ví dụ với stage là prod: https://abc123.execute-api.ap-southeast-1.amazonaws.com/prod).\nBạn có thể tạo Stage trong giao diện Resources hoặc Stages của API\nTạo Stage trong giao diện Resources Ấn vào Deploy API trong giao diện Resources Ở Menu vừa hiện lên, chọn phần New stage trong mục Stage Nhập tên cho Stage ở mục Stage name (mình sẽ đặt là test) Ấn vào Deploy Tạo Stage trong giao diện Stages Ấn vào Create stage trong giao diện Stages Trong giao diện Create stage, đặt tên cho Stage ở Stage name Chọn khung thời gian Deployment ở Deployment Trong Additional settings, bật Throttling và điều chỉnh Rate và Burst theo mong muốn Ấn Create stage Sau khi Deploy thì chúng ta có thể sử dụng API thông qua Invoke URL của các method Kích hoạt Canary cho Stage Canary trong stage của AWS API Gateway là một cơ chế giúp bạn triển khai canary release – tức là phát hành thử một phiên bản mới của API cho một phần nhỏ lưu lượng người dùng, trước khi nhân rộng cho toàn bộ.\nTrong giao diện của stage, ấn vào Canary Ấn vào Create Canary Trong giao diện Create Canary, bạn có thể tùy chọn các thông số cho Canary như Request distribution hoặc Stage cache (Mình sẽ không sử dụng cache cho canary trong workshop này) Ấn Create canary Promote Canary trước khi sử dụng để request được đi qua phiên bản mới của Stage (đề phòng bạn quên và hỏi tại sao đã thay đổi dữ liệu nhưng API vẫn như cũ)\nRequest distribution trong canary của API Gateway chính là cách mà lưu lượng request của client được phân chia giữa: Production stage (phiên bản hiện tại, ổn định) và Canary stage (phiên bản mới, đang thử nghiệm).\n"
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/2-preparation-steps/1.1-create-basic-lambda-function/",
	"title": "Tạo các hàm Lambda cơ bản",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo các hàm Lambda cơ bản Tạo các hàm Lambda phục vụ cho Method Truy cập dịch vụ Lambda Ấn vào Create function Tạo Lambda Function UserFunction 2.1. Trong giao diện Create function\nChọn Author from scratch Ở mục Function name nhập tên của funtion (UserFunction) Chọn Runtime Python 3.13 Chọn Architecture x86_64 Ấn Create function 2.2. Trong giao diện code của Lambda Function\nThay đổi nội dung của json.dumb để dễ dàng nhận biết Tạo Lambda Function PremiumUserFunction Tương tự như các bước trên Tạo Lambda Function devFunction Tương tự như các bước trên "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/2-preparation-steps/1.2-create-iam-role/",
	"title": "Tạo IAM Role",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo IAM Role Tạo IAM Role Truy cập dịch vụ IAM Ấn vào Role ở Menu bên trái Ấn vào Create Role Trong giao diện Create Role Chọn Trusted entity type là AWS service Chọn Use case là Lambda Ấn Next Thêm các Policy như sau Ấn Next Ở bước 3, đặt tên cho Role và review lại các tùy chọn Ấn Create role "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/6-create-cloudwatch-alarm/6.1-create-function-forcechangelimit/",
	"title": "Tạo Lambda Function ForceChangeLimit",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo Lambda Function ForceChangeLimit Tạo Lambda Function Truy cập dịch vụ Lambda Ấn vào Create function -Trong giao diện Create function\nChọn Author from scratch Ở mục Function name nhập tên của funtion (ForceChangeLimit) Chọn Runtime Python 3.13 Chọn Architecture x86_64 Ấn Create function Trong giao diện code của Lambda Authorizer Lambda RateLimitCanary hoạt động tương tự như RateLimitCanary nhưng vì Alarm không thể gửi được giá trị JSON đến Lambda nên chúng ta sẽ thiết lập cố định cho Lambda này. Thay đổi đoạn code như sau: Xem cách tạo webhook Slack ở đây: https://000022.awsstudygroup.com/vi/2-prerequiste/2.4-incomingwebhooksslack/\nimport boto3 import os import urllib3 import json webhook_url = \u0026#34;https://hooks.slack.com/services/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\u0026#34; http = urllib3.PoolManager() def send_slack_notification(message, api_id, stage_name, rate_limit, burst_limit): payload = { \u0026#34;text\u0026#34;: f\u0026#34;:rocket: *API Throttling Update* | API_ID: {api_id} | Stage: {stage_name} | Rate: {rate_limit} req/s | Burst: {burst_limit}\u0026#34;, \u0026#34;blocks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;, \u0026#34;text\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;, \u0026#34;text\u0026#34;: f\u0026#34;*API Throttling Update due to Too much request*\\n*API_ID*: {api_id}\\n*Stage*: {stage_name}\\n*RateLimit*: {rate_limit} req/s\\n*BurstLimit*: {burst_limit}\u0026#34; } } ] } try: encoded_data = json.dumps(payload).encode(\u0026#39;utf-8\u0026#39;) r = http.request( method=\u0026#34;POST\u0026#34;, url=webhook_url, body=encoded_data, headers={\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;} ) if r.status != 200: print(f\u0026#34;Failed to send Slack notification: {r.status}, {r.data.decode(\u0026#39;utf-8\u0026#39;)}\u0026#34;) else: print(\u0026#34;Slack notification sent successfully\u0026#34;) except Exception as e: print(f\u0026#34;Error sending Slack notification: {str(e)}\u0026#34;) def lambda_handler(event, context): apigw = boto3.client(\u0026#39;apigateway\u0026#39;) # Ưu tiên giá trị từ event, nếu không có thì lấy từ biến môi trường api_id = \u0026#34;jbjfqykyob\u0026#34; stage_name = \u0026#34;test\u0026#34; rate_limit = 200 burst_limit = 400 # Kiểm tra nếu thiếu biến cần thiết if not all([api_id, stage_name]): error_message = \u0026#34;Missing required parameters: API_ID or STAGE_NAME\u0026#34; send_slack_notification(error_message, api_id or \u0026#34;N/A\u0026#34;, stage_name or \u0026#34;N/A\u0026#34;, rate_limit, burst_limit) raise ValueError(error_message) try: apigw.update_stage( restApiId=api_id, stageName=stage_name, patchOperations=[ { \u0026#39;op\u0026#39;: \u0026#39;replace\u0026#39;, \u0026#39;path\u0026#39;: \u0026#39;/*/*/throttling/rateLimit\u0026#39;, \u0026#39;value\u0026#39;: str(rate_limit) }, { \u0026#39;op\u0026#39;: \u0026#39;replace\u0026#39;, \u0026#39;path\u0026#39;: \u0026#39;/*/*/throttling/burstLimit\u0026#39;, \u0026#39;value\u0026#39;: str(burst_limit) } ] ) # Gửi thông báo Slack khi cập nhật thành công message = f\u0026#34;API Gateway throttling updated: API_ID={api_id}, Stage={stage_name}, RateLimit={rate_limit} req/s, BurstLimit={burst_limit}\u0026#34; send_slack_notification(message, api_id, stage_name, rate_limit, burst_limit) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: f\u0026#39;Updated throttling: rate={rate_limit}, burst={burst_limit}\u0026#39; } except Exception as e: # Gửi thông báo Slack nếu có lỗi error_message = f\u0026#34;Error updating API Gateway throttling: {str(e)}\u0026#34; send_slack_notification(error_message, api_id, stage_name, rate_limit, burst_limit) raise e "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/5-create-eventbridge-schedule/5.1-create-ratelimitcanary-function/",
	"title": "Tạo Lambda quản lý Stage API",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo Lambda Function RateLimitCanary Test thử Lambda Tạo Lambda Function RateLimitCanary Truy cập dịch vụ Lambda Ấn vào Create function -Trong giao diện Create function\nChọn Author from scratch Ở mục Function name nhập tên của funtion (RateLimitCanary) Chọn Runtime Python 3.13 Chọn Architecture x86_64 Ấn Create function Trong giao diện code của Lambda Authorizer Lambda RateLimitCanary sẽ tự động cập nhật throttling (rate limit \u0026amp; burst limit) cho một Stage trong AWS API Gateway thông qua dữ liệu JSON được gửi đến và thông báo kết quả (thành công hoặc lỗi) qua Slack webhook. Thay đổi đoạn code như sau: Xem cách tạo webhook Slack ở đây: https://000022.awsstudygroup.com/vi/2-prerequiste/2.4-incomingwebhooksslack/\nimport boto3 import os import urllib3 import json webhook_url = \u0026#34;https://hooks.slack.com/services/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\u0026#34; http = urllib3.PoolManager() def send_slack_notification(message, api_id, stage_name, rate_limit, burst_limit): payload = { \u0026#34;text\u0026#34;: f\u0026#34;:rocket: *API Throttling Update* | API_ID: {api_id} | Stage: {stage_name} | Rate: {rate_limit} req/s | Burst: {burst_limit}\u0026#34;, \u0026#34;blocks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;, \u0026#34;text\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;, \u0026#34;text\u0026#34;: f\u0026#34;*API Throttling Update*\\n*API_ID*: {api_id}\\n*Stage*: {stage_name}\\n*RateLimit*: {rate_limit} req/s\\n*BurstLimit*: {burst_limit}\u0026#34; } } ] } try: encoded_data = json.dumps(payload).encode(\u0026#39;utf-8\u0026#39;) r = http.request( method=\u0026#34;POST\u0026#34;, url=webhook_url, body=encoded_data, headers={\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;} ) if r.status != 200: print(f\u0026#34;Failed to send Slack notification: {r.status}, {r.data.decode(\u0026#39;utf-8\u0026#39;)}\u0026#34;) else: print(\u0026#34;Slack notification sent successfully\u0026#34;) except Exception as e: print(f\u0026#34;Error sending Slack notification: {str(e)}\u0026#34;) def lambda_handler(event, context): apigw = boto3.client(\u0026#39;apigateway\u0026#39;) # Ưu tiên giá trị từ event, nếu không có thì lấy từ biến môi trường api_id = event.get(\u0026#39;API_ID\u0026#39;, os.environ.get(\u0026#39;API_ID\u0026#39;, \u0026#39;\u0026#39;)) stage_name = event.get(\u0026#39;STAGE_NAME\u0026#39;, os.environ.get(\u0026#39;STAGE_NAME\u0026#39;, \u0026#39;\u0026#39;)) rate_limit = int(event.get(\u0026#39;RATE_LIMIT\u0026#39;, os.environ.get(\u0026#39;RATE_LIMIT\u0026#39;, \u0026#39;100\u0026#39;))) burst_limit = int(event.get(\u0026#39;BURST_LIMIT\u0026#39;, os.environ.get(\u0026#39;BURST_LIMIT\u0026#39;, \u0026#39;200\u0026#39;))) # Kiểm tra nếu thiếu biến cần thiết if not all([api_id, stage_name]): error_message = \u0026#34;Missing required parameters: API_ID or STAGE_NAME\u0026#34; send_slack_notification(error_message, api_id or \u0026#34;N/A\u0026#34;, stage_name or \u0026#34;N/A\u0026#34;, rate_limit, burst_limit) raise ValueError(error_message) try: apigw.update_stage( restApiId=api_id, stageName=stage_name, patchOperations=[ { \u0026#39;op\u0026#39;: \u0026#39;replace\u0026#39;, \u0026#39;path\u0026#39;: \u0026#39;/*/*/throttling/rateLimit\u0026#39;, \u0026#39;value\u0026#39;: str(rate_limit) }, { \u0026#39;op\u0026#39;: \u0026#39;replace\u0026#39;, \u0026#39;path\u0026#39;: \u0026#39;/*/*/throttling/burstLimit\u0026#39;, \u0026#39;value\u0026#39;: str(burst_limit) } ] ) # Gửi thông báo Slack khi cập nhật thành công message = f\u0026#34;API Gateway throttling updated: API_ID={api_id}, Stage={stage_name}, RateLimit={rate_limit} req/s, BurstLimit={burst_limit}\u0026#34; send_slack_notification(message, api_id, stage_name, rate_limit, burst_limit) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: f\u0026#39;Updated throttling: rate={rate_limit}, burst={burst_limit}\u0026#39; } except Exception as e: # Gửi thông báo Slack nếu có lỗi error_message = f\u0026#34;Error updating API Gateway throttling: {str(e)}\u0026#34; send_slack_notification(error_message, api_id, stage_name, rate_limit, burst_limit) raise e Các thư viện cần có boto3: SDK để gọi API AWS (ở đây dùng API Gateway) urllib3: gửi request HTTP (dùng để gọi Slack webhook) Hàm send_slack_notification Gửi request POST tới webhook kèm thông báo Hàm Lambda handler def lambda_handler(event, context): apigw = boto3.client(\u0026#39;apigateway\u0026#39;) Tạo client API Gateway để gọi các API update stage. api_id = event.get(\u0026#39;API_ID\u0026#39;, os.environ.get(\u0026#39;API_ID\u0026#39;, \u0026#39;\u0026#39;)) stage_name = event.get(\u0026#39;STAGE_NAME\u0026#39;, os.environ.get(\u0026#39;STAGE_NAME\u0026#39;, \u0026#39;\u0026#39;)) rate_limit = int(event.get(\u0026#39;RATE_LIMIT\u0026#39;, os.environ.get(\u0026#39;RATE_LIMIT\u0026#39;, \u0026#39;100\u0026#39;))) burst_limit = int(event.get(\u0026#39;BURST_LIMIT\u0026#39;, os.environ.get(\u0026#39;BURST_LIMIT\u0026#39;, \u0026#39;200\u0026#39;))) Ưu tiên lấy giá trị từ event (payload khi invoke Lambda). Nếu không có → fallback sang biến môi trường. if not all([api_id, stage_name]): error_message = \u0026#34;Missing required parameters: API_ID or STAGE_NAME\u0026#34; send_slack_notification(error_message, api_id or \u0026#34;N/A\u0026#34;, stage_name or \u0026#34;N/A\u0026#34;, rate_limit, burst_limit) raise ValueError(error_message) Nếu thiếu API_ID hoặc STAGE_NAME → báo lỗi Slack + raise exception. apigw.update_stage( restApiId=api_id, stageName=stage_name, patchOperations=[ {\u0026#39;op\u0026#39;: \u0026#39;replace\u0026#39;,\u0026#39;path\u0026#39;: \u0026#39;/*/*/throttling/rateLimit\u0026#39;,\u0026#39;value\u0026#39;: str(rate_limit)}, {\u0026#39;op\u0026#39;: \u0026#39;replace\u0026#39;,\u0026#39;path\u0026#39;: \u0026#39;/*/*/throttling/burstLimit\u0026#39;,\u0026#39;value\u0026#39;: str(burst_limit)} ] ) Gọi API update_stage của API Gateway để thay đổi config. Test thử Lambda Trong giao diện của Lambda function RateLimitCanary, chọn tab Test Chọn Create new event Dán các giá trị JSON sau và ấn Test: { \u0026#34;API_ID\u0026#34;:\u0026#34;jbjfqykyob\u0026#34;, \u0026#34;STAGE_NAME\u0026#34;:\u0026#34;test\u0026#34;, \u0026#34;RATE_LIMIT\u0026#34;:50, \u0026#34;BURST_LIMIT\u0026#34;:100 } "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/2-preparation-steps/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo các hàm Lambda cơ bản Tạo IAM Role "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/5-create-eventbridge-schedule/5.2-create-eventbridge-schedule/",
	"title": "Tạo EventBridge Schedule",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo Lambda Function RateLimitCanary Tạo EventBridge Schedule Tạo Schedule Truy cập dịch vụ Schedule của EventBridge Ấn Create schedule Trong Step 1 của giao diện Create schedule, bạn có thể cài đặt tùy ý, mình sẽ cài đặt như sau: Trong Step 2 của giao diện Create schedule: chọn Target API là AWS Lambda -\u0026gt; chọn Lambda Function RateLimitCanary -\u0026gt; Dán Payload: { \u0026#34;API_ID\u0026#34;:\u0026#34;jbjfqykyob\u0026#34;, \u0026#34;STAGE_NAME\u0026#34;:\u0026#34;test\u0026#34;, \u0026#34;RATE_LIMIT\u0026#34;:100, \u0026#34;BURST_LIMIT\u0026#34;:200 } Payload này sẽ được gửi đến RateLimitCanary và các giá trị sẽ được áp dụng cho stage được ghi ở trong Payload. Trong Step 3 của giao diện Create schedule: Trong Step 4 của giao diện Create schedule: review lại và ấn Create schedule Tương tự bạn có thể tạo các Schedule cho những thời điểm khác nhau nhằm tăng, giảm lưu lượng request của stage API.\nKhi Schedule kích hoạt thì thông báo sẽ được gửi qua Slack "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/3-create-api-usage-plan-api-key/3.2-create-usage-plan/",
	"title": "Tạo Usage Plan",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo Usage Plan Thêm Associated stages Usage Plan trong API Gateway là cơ chế để quản lý cách các client tiêu thụ API, bằng cách kết hợp quota (hạn mức), throttling (giới hạn tốc độ) và API Key, áp dụng cho các stage cụ thể.\nTạo Usage Plan Truy cập vào Usage Plan ở Menu bên trái trong giao diện API Gateway Ấn vào Create usage plan Trong giao diện Create usage plan, nhập tên cho plan ở Name Bật Throttling Nhập Rate và Burst theo mong muốn Bật Quota Nhập số lượng Requests theo mong muốn (ví dụ cho người dùng bình thường là 100 Per day tuy nhiên mình sẽ chỉnh là 10 requests per day để dễ dàng kiểm thử trước ), và trong khoảng thời gian Per day Ấn vào Create usage plan Rate là tốc độ trung bình (requests per second – RPS) mà API Gateway cho phép, Burst là số lượng request tối đa có thể xử lý ngay lập tức trong một thời điểm ngắn (spike).\nTiếp tục tạo các Usage plan cho dev(rate: 1000, burst: 2000, tắt quota) và premium user(rate: 20, burst: 40, quota: 100 requests per day) Thêm Associated stages Khi một stage dược gán vào Usage Plan, tất cả các request đi qua stage đó sẽ chịu sự kiểm soát quota/throttling mà bạn định nghĩa.\nẤn vào một trong các Usage plan Trong giao diện của Usage plan, ấn vào Add stage Chọn API là API vừa tạo (MyProjectAPI) Chọn Stage là test Trong phần Method-level throttling, chọn Resource là các Resource đã tạo trước đó, chọn Method GET, tùy chỉnh Rate và Burst Ấn Add to usage plan Áp dụng cho các usage plan khác "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/3-create-api-usage-plan-api-key/3.3-create-api-key/",
	"title": "Tạo API Key",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo API Key Gán API Key vào Usage Plan Thêm API Key cho Method Tạo API Key Truy cập vào API Keys ở Menu bên trái trong giao diện API Gateway Ấn vào Create API Key Trong giao diện Create API Key, đặt tên cho API Key trong trường Name Chọn Auto-generate Ấn Save Tạo thêm 2 API Key cho User và Premium user: normalUserKey, premiumUser Gán API Key vào Usage Plan Ấn vào một usage plan, chọn Associated API Keys Ấn vào Add API Key Trong giao diện Add API Key, chọn Add existing key và chọn các API Key tương ứng với usage plan của bạn. Làm tương tự với các Usage plan còn lại Thêm API Key cho Method Ấn chọn tab Method request của method GET trong Menu Resources Ấn vào Edit Trong giao diện Edit method request bật API Key required Ấn Save Làm tương tự với các method GET còn lại "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/3-create-api-usage-plan-api-key/",
	"title": "Tạo API, Usage Plan, API Key",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo API Tạo Usage Plan Tạo API Key "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/4-create_authorizer/",
	"title": "Tạo Authorizer",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo Lambda Function Authorizer Tích hợp vào API Thiết lập Authorizer cho các Method Authorizer trong API Gateway là cơ chế giúp bạn kiểm soát việc xác thực và phân quyền request (dựa trên token hoặc policy) trước khi request được chuyển đến backend.\nTạo Lambda Function Authorizer Truy cập dịch vụ Lambda Ấn vào Create function -Trong giao diện Create function\nChọn Author from scratch Ở mục Function name nhập tên của funtion (Authorizer) Chọn Runtime Python 3.13 Chọn Architecture x86_64 Ấn Create function Trong giao diện code của Lambda Authorizer Lambda Authorizer này sẽ kiểm tra authorizationToken (gửi từ client), dựa vào token, nó quyết định Allow hay Deny quyền gọi API, Nếu được Allow, nó chỉ cho phép truy cập đến một số resource cụ thể (endpoint). Thay đổi đoạn code như sau: def generate_policy(principal_id, effect, resources, context=None): if not isinstance(resources, list): resources = [resources] policy = { \u0026#34;principalId\u0026#34;: principal_id, \u0026#34;policyDocument\u0026#34;: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [{ \u0026#34;Action\u0026#34;: \u0026#34;execute-api:Invoke\u0026#34;, \u0026#34;Effect\u0026#34;: effect, \u0026#34;Resource\u0026#34;: resources }] } } if context: policy[\u0026#34;context\u0026#34;] = context return policy user_type_config = { \u0026#34;normalUser\u0026#34;: { \u0026#34;resource\u0026#34;: \u0026#34;Users\u0026#34; }, \u0026#34;premiumUser\u0026#34;: { \u0026#34;resource\u0026#34;: \u0026#34;PremiumUsers\u0026#34; }, \u0026#34;devs\u0026#34;: { \u0026#34;resource\u0026#34;: \u0026#34;Devs\u0026#34; } } def build_allowed_resource(method_arn, resource_pattern): arn_parts = method_arn.split(\u0026#34;:\u0026#34;) region = arn_parts[3] account_id = arn_parts[4] api_gateway_arn_parts = arn_parts[5].split(\u0026#34;/\u0026#34;) api_id = api_gateway_arn_parts[0] stage = api_gateway_arn_parts[1] http_method = api_gateway_arn_parts[2] resource_base = f\u0026#34;arn:aws:execute-api:{region}:{account_id}:{api_id}/{stage}/{http_method}\u0026#34; clean_resource_pattern = resource_pattern.rstrip(\u0026#34;/*\u0026#34;) return [f\u0026#34;{resource_base}/{clean_resource_pattern}\u0026#34;] def lambda_handler(event, context): token = event.get(\u0026#34;authorizationToken\u0026#34;) method_arn = event[\u0026#34;methodArn\u0026#34;] if token not in user_type_config: return generate_policy( principal_id=\u0026#34;unknown\u0026#34;, effect=\u0026#34;Deny\u0026#34;, resources=method_arn, context={ \u0026#34;token\u0026#34;: token or \u0026#34;None\u0026#34;, \u0026#34;methodArn\u0026#34;: method_arn } ) config = user_type_config[token] allowed_resources = build_allowed_resource(method_arn, config[\u0026#34;resource\u0026#34;]) return generate_policy( principal_id=token, effect=\u0026#34;Allow\u0026#34;, resources=allowed_resources, context={ \u0026#34;token\u0026#34;: token, \u0026#34;methodArn\u0026#34;: method_arn } ) Hàm generate_policy sẽ tạo các policy mà API Gateway cần: Tạo một IAM Policy document (theo chuẩn JSON của AWS). principalId: định danh user (ở đây chính là token hoặc chuỗi \u0026ldquo;unknown\u0026rdquo;). effect: \u0026ldquo;Allow\u0026rdquo; hoặc \u0026ldquo;Deny\u0026rdquo;. resources: danh sách ARN (API endpoint) được phép gọi. context: thêm metadata (trả về cho API Gateway → có thể forward đến Lambda backend) def generate_policy(principal_id, effect, resources, context=None): if not isinstance(resources, list): resources = [resources] policy = { \u0026#34;principalId\u0026#34;: principal_id, \u0026#34;policyDocument\u0026#34;: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [{ \u0026#34;Action\u0026#34;: \u0026#34;execute-api:Invoke\u0026#34;, \u0026#34;Effect\u0026#34;: effect, \u0026#34;Resource\u0026#34;: resources }] } } if context: policy[\u0026#34;context\u0026#34;] = context return policy Cấu hình user_type_config Mapping token → resource path được phép truy cập Ví dụ: Nếu client gửi token \u0026ldquo;normalUser\u0026rdquo; → chỉ được gọi resource /Users user_type_config = { \u0026#34;normalUser\u0026#34;: { \u0026#34;resource\u0026#34;: \u0026#34;Users\u0026#34; }, \u0026#34;premiumUser\u0026#34;: { \u0026#34;resource\u0026#34;: \u0026#34;PremiumUsers\u0026#34; }, \u0026#34;devs\u0026#34;: { \u0026#34;resource\u0026#34;: \u0026#34;Devs\u0026#34; } } Hàm build_allowed_resource Phân tích methodArn (ARN mà API Gateway gửi đến Authorizer) Lấy ra: region, account_id, api_id, stage, http_method Sau đó build lại ARN mới cho resource mà user được phép truy cập Trả về danh sách ARN hợp lệ def build_allowed_resource(method_arn, resource_pattern): arn_parts = method_arn.split(\u0026#34;:\u0026#34;) region = arn_parts[3] account_id = arn_parts[4] api_gateway_arn_parts = arn_parts[5].split(\u0026#34;/\u0026#34;) api_id = api_gateway_arn_parts[0] stage = api_gateway_arn_parts[1] http_method = api_gateway_arn_parts[2] resource_base = f\u0026#34;arn:aws:execute-api:{region}:{account_id}:{api_id}/{stage}/{http_method}\u0026#34; clean_resource_pattern = resource_pattern.rstrip(\u0026#34;/*\u0026#34;) return [f\u0026#34;{resource_base}/{clean_resource_pattern}\u0026#34;] Hàm lambda_handler Lấy token từ event (client gửi trong header Authorization). Nếu token không tồn tại trong user_type_config -\u0026gt; Trả về policy Deny (cấm truy cập). Nếu token hợp lệ -\u0026gt; Lấy config resource từ user_type_config -\u0026gt;Xây dựng ARN resource cho phép -\u0026gt;Trả về policy Allow, chỉ cho phép truy cập đúng resource đó def lambda_handler(event, context): token = event.get(\u0026#34;authorizationToken\u0026#34;) method_arn = event[\u0026#34;methodArn\u0026#34;] if token not in user_type_config: return generate_policy( principal_id=\u0026#34;unknown\u0026#34;, effect=\u0026#34;Deny\u0026#34;, resources=method_arn, context={ \u0026#34;token\u0026#34;: token or \u0026#34;None\u0026#34;, \u0026#34;methodArn\u0026#34;: method_arn } ) config = user_type_config[token] allowed_resources = build_allowed_resource(method_arn, config[\u0026#34;resource\u0026#34;]) return generate_policy( principal_id=token, effect=\u0026#34;Allow\u0026#34;, resources=allowed_resources, context={ \u0026#34;token\u0026#34;: token, \u0026#34;methodArn\u0026#34;: method_arn } ) Tích hợp vào API Truy cập vào API vừa tạo trong API Gateway Ấn vào Authorizer ở Menu bên trái Ấn vào Create authorizer Trong giao diện Create authorizer, đặt tên cho Authorizer ở trường Authorizer name Chọn Authorizer type là Lambda Chọn Lambda function là Lambda function Authorizer vừa tạo Chọn Lambda event payload là Token Đặt Token source là Authorization Tắt cache để đỡ tốn chi phí Ấn Create authorizer Nên đặt Token source là Authorization vì đây là một header mặc định trong CORS\nChúng ta có thể test Authorizer vừa mới tạo trong giao diện của authorizer đó Nhập giá trị Token vào Token Value và ấn Test authorizer Thiết lập Authorizer cho các Method Ấn vào Edit trong tab Method request của các Method trong API Chọn Authorization là Authorizer vừa tạo Ấn Save Thực hiện tương tự cho các Method còn lại "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/5-create-eventbridge-schedule/",
	"title": "Tạo EventBridge Schedule",
	"tags": [],
	"description": "",
	"content": "Trong chương này chúng ta sẽ tạo các Schedule cho phép kích hoạt các Lambda Function điều chỉnh Rate và Burst cho API và các khung giờ cố định. Đồng thời xây dựng một Lambda Function RateLimitCanary cho phép điều chỉnh Rate và Burst của API.\nNội dung:\nTạo Lambda Function RateLimitCanary Tạo EventBridge Schedule "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/6-create-cloudwatch-alarm/",
	"title": "Tạo Cloudwatch Alarm",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo Cloudwatch Alarm để có thể tự động điều chỉnh API mỗi khi số lượng request vượt mức cho phép.\nNội dung:\nTạo Lambda Function ForceChangeLimit Tạo Cloudwatch Alarm "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/6-create-cloudwatch-alarm/6.2-create-alarm/",
	"title": "Tạo Cloudwatch Alarm và Dashboard",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nThiết lập Cloudwatch Dashboard Tạo Cloudwatch Alarm Thêm quyền Invoke cho Alarm Kiểm thử Alarm Thiết lập Cloudwatch Dashboard Truy cập dịch vụ Cloudwatch Dashboard Ấn vào Create dashboard Nhập tên cho Dashboard ở trường Dashboard name Ấn Create dashboard Trong giao diện của dashboard vừa tạo, ấn vào icon dấu + ở góc trên bên phải Trong giao diện Add widget, chọn Data source types là Cloudwatch Chọn Metrics là Line Ấn Next Trong giao diện Add metric graph chọn ApiGateway -\u0026gt; By Stage -\u0026gt; chọn các metric bạn muốn Ấn Create widget Nếu đã hài lòng với dashboard của mình, chọn Save Thiết lập Alarm Truy cập dịch vụ Cloudwatch Alarm Ấn vào Create Alarm Trong Step 1 của giao diện Create alarm chọn Select metric -\u0026gt; chọn ApiGateway -\u0026gt; By Stage -\u0026gt; chọn Count của stage test -\u0026gt; Ấn Select metric Trong giao diện vừa hiện ra, chọn Statistic là Sum, Threshold là Static, Whenever Count is\u0026hellip; Greater Than\u0026hellip; 10 (Để test function) Ấn Next Ở Step 2 chọn Alarm state trigger là In alarm Chọn Create new topic, đặt tên cho topic, email của bạn và ấn Create topic Thêm Lambda action và chọn lambda ForceChangeLimit Ấn Next Ở Step 3 đặt tên cho Alarm và ấn Next Ở Step 4 Review lại và ấn Create alarm Thêm quyền Invoke cho Alarm Truy cập vào Lambda ForceChangeLimit và ấn vào tab Configuration Chọn Permission -\u0026gt; ở mục Resource-based policy statements, ấn Add permissions Chọn Service là Other Đặt StatementID Đặt Principal là lambda.alarms.cloudwatch.amazonaws.com Source ARN là ARN của Alarm vừa tạo Action chọn lambda:InvokeFunction Ấn Save Nếu thiếu action này thì Alarm sẽ không kích hoạt được Lambda Function\nKiểm thử Alarm Tạo các request và gửi thông qua Postman vượt quá mức truy cập cho phép và xem kết quả, nếu thông báo được gửi tới slack thành công và Alarm chuyển sang In Alarm thì tức là Alarm đã hoạt động bình thường. "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/7-hosting-static-web-with-s3/",
	"title": "Hosting web tĩnh với S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo các tài nguyên cho web Tạo S3 bucket và hosting Tạo các tài nguyên cho web Tạo file HTML: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Rate Limit Test\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./css/index.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Chọn loại người dùng:\u0026lt;/h2\u0026gt; \u0026lt;!-- Sử dụng các token được thiết lập trong Lambda Authorizer --\u0026gt; \u0026lt;button onclick=\u0026#34;setUser(\u0026#39;normalUser\u0026#39;)\u0026#34;\u0026gt;Normal User\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;setUser(\u0026#39;premiumUser\u0026#39;)\u0026#34;\u0026gt;Premium User\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;setUser(\u0026#39;devs\u0026#39;)\u0026#34;\u0026gt;Developer\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;Chọn API Key\u0026lt;/h2\u0026gt; \u0026lt;!-- Sử dụng API Key cho các loại người dùng của bạn --\u0026gt; \u0026lt;button onclick=\u0026#34;setApiKey(\u0026#39;ZIqUUal5OIaV6ldWfPU4WaFfWMnCDoAQ5kES3MCU\u0026#39;)\u0026#34;\u0026gt;Normal User\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;setApiKey(\u0026#39;jYpAYtUYQA3BNUknsLaaD4iovwvKgOBJ4XyD5Cd2\u0026#39;)\u0026#34;\u0026gt;Premium User\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;setApiKey(\u0026#39;0H8E24Q6dtacxEBGtK5p87p7c2fjX0cheH0Shmv8\u0026#39;)\u0026#34;\u0026gt;Developer\u0026lt;/button\u0026gt; \u0026lt;h2\u0026gt;Chọn Route\u0026lt;/h2\u0026gt; \u0026lt;!-- Sử dụng Resource của bạn --\u0026gt; \u0026lt;button onclick=\u0026#34;setURL(\u0026#39;Users\u0026#39;)\u0026#34;\u0026gt;Normal User\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;setURL(\u0026#39;PremiumUsers\u0026#39;)\u0026#34;\u0026gt;Premium User\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;setURL(\u0026#39;Devs\u0026#39;)\u0026#34;\u0026gt;Developer\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;Current token: \u0026lt;span id=\u0026#34;currentToken\u0026#34;\u0026gt;none\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Current API Key: \u0026lt;span id=\u0026#34;currentApiKey\u0026#34;\u0026gt;none\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Current URL: \u0026lt;span id=\u0026#34;currentURL\u0026#34;\u0026gt;none\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;makeRequest()\u0026#34;\u0026gt;Gửi Request\u0026lt;/button\u0026gt; \u0026lt;pre id=\u0026#34;response\u0026#34;\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;script\u0026gt; let currentToken = \u0026#34;\u0026#34;; let currentApiKey = \u0026#34;\u0026#34;; let currentPath = \u0026#34;\u0026#34;; // Thay thế bằng URL stage của bạn const baseURL = \u0026#34;https://jbjfqykyob.execute-api.ap-southeast-2.amazonaws.com/test/\u0026#34;; function setUser(token) { currentToken = token; document.getElementById(\u0026#34;currentToken\u0026#34;).textContent = token; } function setApiKey(apiKey) { currentApiKey = apiKey; document.getElementById(\u0026#34;currentApiKey\u0026#34;).textContent = apiKey; } function setURL(path) { currentPath = path; document.getElementById(\u0026#34;currentURL\u0026#34;).textContent = baseURL + path; } async function makeRequest() { const responseBox = document.getElementById(\u0026#34;response\u0026#34;); if (!currentToken || !currentApiKey || !currentPath) { alert(\u0026#34;Hãy chọn loại người dùng trước.\u0026#34;); return; } try { const res = await fetch(baseURL + currentPath, { method: \u0026#34;GET\u0026#34;, headers: { \u0026#34;Authorization\u0026#34;: currentToken, \u0026#34;X-Api-Key\u0026#34;: currentApiKey, } }); const text = await res.text(); responseBox.textContent = `Status: ${res.status}\\n\\nBody:\\n${text}`; } catch (err) { responseBox.textContent = `Lỗi khi gửi request:\\n${err}`; } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tạo file css (tùy chọn): /* Reset default margins and padding */ * { margin: 0; padding: 0; box-sizing: border-box; } /* Body styling */ body { font-family: \u0026#39;Arial\u0026#39;, sans-serif; background-color: #f4f7fa; padding: 20px; max-width: 800px; margin: 0 auto; color: #333; } /* Headings */ h2 { font-size: 1.5rem; margin-bottom: 15px; color: #2c3e50; } /* Button styling */ button { background-color: #3498db; color: white; border: none; padding: 10px 20px; margin: 5px; border-radius: 5px; cursor: pointer; font-size: 1rem; transition: background-color 0.3s ease, transform 0.1s ease; } button:hover { background-color: #2980b9; transform: translateY(-2px); } button:active { transform: translateY(0); } /* Paragraph and span styling */ p { font-size: 1.1rem; margin: 10px 0; } span { font-weight: bold; color: #e74c3c; } /* Response area */ pre#response { background-color: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 5px; min-height: 100px; font-family: \u0026#39;Courier New\u0026#39;, monospace; white-space: pre-wrap; word-wrap: break-word; margin-top: 20px; overflow-x: auto; } /* Responsive design */ @media (max-width: 600px) { body { padding: 10px; } button { display: block; width: 100%; margin: 10px 0; } h2 { font-size: 1.3rem; } p { font-size: 1rem; } } Tạo S3 bucket và hosting Truy cập dịch vụ S3 Ấn vào Create bucket Đặt tên cho bucket ở Bucket name và ấn Create bucket Thêm file vào bucket Truy cập bucket vừa tạo và ấn vào Upload Ấn vào Add files để thêm các file cần thiết Ấn Upload Enable Static website hosting Vào tab Properties của bucket Tìm và Enable Static website hosting Chọn Hosting type là Host a static website Index document là file Index.html Bỏ chặn public access Vào tab Permissions, tìm và tắt Block public access (bucket settings) Thêm bucket policy Vào tab Permissions → Bucket policy và dán (thay api-rate-limit-web/ bằng tên bucket của bạn): { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::api-rate-limit-web/*\u0026#34; } ] } "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/8-clean-up/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Nội dung\nXóa S3 Xóa EventBridge Schedule Xóa Cloudwatch Alarm Xóa API Gateway Xóa Lambda Xóa IAM Role Bây giờ là các bước cần tiến hành để xóa các tài nguyên đã tạo.\nXóa S3 Truy cập S3 Ấn chọn S3 bucket đã tạo Ấn Empty Điền permanently delete, sau đó ấn Empty để tiến hành xóa object trong bucket Ấn Exit Sau khi xóa hết object trong bucket, ấn Delete nhập tên bucket và ấn Delete bucket Xóa EventBridge Schedule Truy cập dịch vụ Schedule của EventBridge Chọn Schedule và ấn Delete Xác nhận Delete Xóa Cloudwatch Alarm Truy cập dịch vụ Cloudwatch Alarm Chọn Alarm Ấn Action -\u0026gt; chọn Delete Xác nhận Delete Xóa API Gateway Xóa API Truy cập vào API Gateway Chọn API -\u0026gt; Chọn Delete Xóa Usage plan Truy cập vào Usage plans Chọn các usage plan -\u0026gt; Chọn Delete Gõ confirm và ấn Delete Xóa API Key Truy cập vào API Keys Chọn các API Key -\u0026gt; Ấn vào Action Chọn Delete -\u0026gt; Xác nhận Delete Xóa Lambda Truy cập Lambda Chọn các Lambda -\u0026gt; Ấn vào Action Chọn Delete -\u0026gt; gõ confirm -\u0026gt; Ấn vào Delete Xóa IAM Role Truy cập IAM Role Chọn role và ấn Delete gõ tên role và ấn Delete "
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/API-RateLimit-Workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]